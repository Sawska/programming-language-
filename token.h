#ifndef TOKEN_H

#define TOKEN_H 
#include  <string>


struct TOKEN
{
    enum OPERATORS {
    PLUS_OPERATOR ,
    MINUS_OPERATOR,
    MULTIPLY_OPERATOR,
    DIVIDE_OPERATOR,
    AND_OPERATOR,
    OR_OPERATOR,
    NOT_OPERATOR,
    BIT_AND_OPERATOR,
    BIT_OR_OPERATOR,
    BIT_NOT_OPERATOR,
    GREATER_THAN_OPERATOR,
    LESS_THAN_OPERATOR,
    LEFT_SHIFT_OPERATOR,
    RIGHT_SHIFT_OPERATOR,
    EQUALS_OPERATOR,
    QUESTION_OPERATOR,
    INCREMENT_OPERATOR,
    COMPARE_OPERATOR,
    DECREMENT_OPERATOR,
    UNKNOWN,
    EQULA_PLUS_OPERATOR,
    EQULA_MINUS_OPERATOR,
    EQUAL_DIVIDE_OPERATOR,
    EQUAL_MULTIPLY_OPERATOR,
    LEFT_SHIFT_EQUAL_OPERATOR,
    RIGHT_SHIFT_EQUAL_OPERATOR,
    GREATER_THAN_EQUAL_OPERATOR,
    LESS_THAN_EQUAL_OPERATOR,
    NOT_EQUALS_OPERATOR,
};



enum TOKEN_CONCEPTS {
    NUMBER,
    OPEN_BRACKETS,
    CLOSE_BRACKETS,
    ERROR_TOKEN,
};



    TOKEN_CONCEPTS concept;
    OPERATORS op;
    double number;
};




#endif //TOKEN_H;